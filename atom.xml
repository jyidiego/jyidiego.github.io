<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Cloud APIs]]></title>
  <link href="http://jyidiego.github.io/atom.xml" rel="self"/>
  <link href="http://jyidiego.github.io/"/>
  <updated>2014-02-17T21:19:34+00:00</updated>
  <id>http://jyidiego.github.io/</id>
  <author>
    <name><![CDATA[John Yi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Exploring Jclouds With Groovy: A Python Developers Point of View]]></title>
    <link href="http://jyidiego.github.io/blog/2014/02/17/exploring-jclouds-a-python-developers-point-of-view/"/>
    <updated>2014-02-17T15:49:25+00:00</updated>
    <id>http://jyidiego.github.io/blog/2014/02/17/exploring-jclouds-a-python-developers-point-of-view</id>
    <content type="html"><![CDATA[<p>One of the most powerful features of Python is the REPL (Run, Evaluate, Print, and Loop) This allows developers
to run their code and get quick feedback. Developers are able test out new ideas and try
out different things without the cycle of modifiying, compiling, and running the source code.
Getting quick feedback for a snippet of code is one of the reasons why Python has been so popular.
One of the most useful things about Python&rsquo;s REPL is the introspection
capabilities. This allows developers to easily and dynamically explore libraries.
In the Java world there are a number of options as well to do this.
For most Java developers their IDEs also provide features like code completion, on the fly code analysis,
and quick access to help documentation. However most Python developers are not familiar with Java IDEs.
Also, they may need to learn Java for a project and it would be useful to be able to work with a Java
like syntax in a REPL environment. This is where a Java developer would point his brethren Python developer
to Groovy. Groovy has some great features such as being a dynamic language like Python and
seamless integration to existing Java classes and libraires. Jclouds has become the defacto library
for multicloud infrastructures for Java developers. (The Python equivalent being libcloud
<a href="https://libcloud.readthedocs.org/en/latest/">https://libcloud.readthedocs.org/en/latest/</a>) So if there is a project with Java
developers and multiple clouds chances are knowing jclouds will be useful. This blog will
focus on exploring jclouds using Groovy. So with that in mind let&rsquo;s get our environment setup. First
we&rsquo;ll need to setup our Java environment:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>test code</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
</feed>
